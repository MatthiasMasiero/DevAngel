import json
import boto3
from datetime import datetime

s3 = boto3.client('s3')
sns = boto3.client('sns')
BUCKET_NAME = 'devangel-incident-data-1761448500'
SNS_TOPIC_ARN = 'arn:aws:sns:us-east-1:478047815638:DevAngelAlerts'

def lambda_handler(event, context):
    # Create incident ID with exact timestamp format
    incident_id = f"incident-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
    
    # Get summarizer output
    detailed_analysis = event.get('detailed_analysis', '')
    error_summaries = event.get('error_summaries', [])
    timeline_analysis = event.get('timeline_analysis', {})
    recommendations = event.get('recommendations', [])
    
    # Create enhanced incident data
    enhanced_data = {
        'incident_id': incident_id,
        'timestamp': datetime.now().isoformat(),
        'update_type': 'enhanced',
        'analysis': {
            'detailed_analysis': detailed_analysis,
            'error_summaries': error_summaries,
            'timeline_analysis': timeline_analysis,
            'recommendations': recommendations
        },
        'status': 'complete'
    }
    
    # Store enhanced data in S3
    try:
        s3.put_object(
            Bucket=BUCKET_NAME,
            Key=f'incidents/{incident_id}-enhanced.json',
            Body=json.dumps(enhanced_data),
            ContentType='application/json'
        )
        
        # Also store as latest
        s3.put_object(
            Bucket=BUCKET_NAME,
            Key='latest-incident.json',
            Body=json.dumps(enhanced_data),
            ContentType='application/json'
        )
        
        stored = True
    except:
        stored = False
    
    # Send completion email with AI analysis
    email_result = send_completion_email(incident_id, detailed_analysis, recommendations)
    
    # Return exact format from working version
    return {
        'incident_id': incident_id,
        'update_type': 'enhanced',
        'stored': stored,
        'email_sent': email_result
    }

def send_completion_email(incident_id, detailed_analysis, recommendations):
    """Send completion email with full AI analysis"""
    
    subject = f"DevAngel Analysis Complete - {incident_id}"
    
    # Format recommendations
    rec_text = ""
    for i, rec in enumerate(recommendations[:3], 1):
        rec_text += f"{i}. {rec.get('priority', 'MEDIUM')} PRIORITY: {rec.get('action', 'No action')}\n"
        rec_text += f"   Reason: {rec.get('reason', 'Analysis complete')}\n"
        rec_text += f"   Timeline: {rec.get('timeline', 'Immediate')}\n\n"
    
    # Create complete email message
    message = f"""DevAngel AI Analysis Complete

INCIDENT: {incident_id}
STATUS: Analysis completed successfully

AI ANALYSIS:
{detailed_analysis[:500]}...

RECOMMENDED ACTIONS:
{rec_text if rec_text else "No specific recommendations at this time."}

This analysis was generated by DevAngel AI using AWS Bedrock.
"""
    
    try:
        response = sns.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=message,
            Subject=subject
        )
        
        return {
            'status': 'sent',
            'message_id': response['MessageId']
        }
        
    except Exception as e:
        return {
            'status': 'failed',
            'error': str(e)
        }
